// Autogenerated AST node
package org.python.antlr.ast;

import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.ast.PythonTreeProcessor;
import org.python.ast.datatypes.PArguments;
import org.python.ast.utils.*;
import org.python.compiler.ScopesCompiler;
import org.python.core.*;
import org.python.core.truffle.ASTInterpreter;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;

import com.oracle.truffle.api.*;
import com.oracle.truffle.api.frame.FrameDescriptor;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.VirtualFrame;

import java.util.ArrayList;
import java.util.List;

@ExposedType(name = "_ast.FunctionDef", base = AST.class)
public class FunctionDef extends stmt {
    public static final PyType TYPE = PyType.fromClass(FunctionDef.class);
    private String name;
    // truffle
    FrameDescriptor frameDescriptor;

    public FrameDescriptor getFrameDescriptor() {
        return frameDescriptor;
    }

    public void setFrameDescriptor(FrameDescriptor frameDescriptor) {
        this.frameDescriptor = frameDescriptor;

        if (ASTInterpreter.debug) {
            System.out.println("----> frameDescriptor " + this + " " + name + " " + frameDescriptor.getSlots());
        }
    }

    public String getInternalName() {
        return name;
    }

    private Name nameNode;

    public Name getInternalNameNode() {
        return nameNode;
    }

    @ExposedGet(name = "name")
    public PyObject getName() {
        if (name == null)
            return Py.None;
        return new PyString(name);
    }

    @ExposedSet(name = "name")
    public void setName(PyObject name) {
        this.name = AstAdapters.py2identifier(name);
    }

    private arguments args;

    public arguments getInternalArgs() {
        return args;
    }

    @ExposedGet(name = "args")
    public PyObject getArgs() {
        return args;
    }

    @ExposedSet(name = "args")
    public void setArgs(PyObject args) {
        this.args = AstAdapters.py2arguments(args);
    }

    private java.util.List<stmt> body;

    public java.util.List<stmt> getInternalBody() {
        return body;
    }

    @ExposedGet(name = "body")
    public PyObject getBody() {
        return new AstList(body, AstAdapters.stmtAdapter);
    }

    @ExposedSet(name = "body")
    public void setBody(PyObject body) {
        this.body = AstAdapters.py2stmtList(body);
    }

    private java.util.List<expr> decorator_list;

    public java.util.List<expr> getInternalDecorator_list() {
        return decorator_list;
    }

    @ExposedGet(name = "decorator_list")
    public PyObject getDecorator_list() {
        return new AstList(decorator_list, AstAdapters.exprAdapter);
    }

    @ExposedSet(name = "decorator_list")
    public void setDecorator_list(PyObject decorator_list) {
        this.decorator_list = AstAdapters.py2exprList(decorator_list);
    }

    private final static PyString[] fields = new PyString[] {
            new PyString("name"), new PyString("args"), new PyString("body"),
            new PyString("decorator_list") };

    @ExposedGet(name = "_fields")
    public PyString[] get_fields() {
        return fields;
    }

    private final static PyString[] attributes = new PyString[] {
            new PyString("lineno"), new PyString("col_offset") };

    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() {
        return attributes;
    }

    public FunctionDef(PyType subType) {
        super(subType);
    }

    public FunctionDef() {
        this(TYPE);
    }

    @ExposedNew
    @ExposedMethod
    public void FunctionDef___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("FunctionDef", args, keywords,
                new String[] { "name", "args", "body", "decorator_list",
                        "lineno", "col_offset" }, 4, true);
        setName(ap.getPyObject(0, Py.None));
        setArgs(ap.getPyObject(1, Py.None));
        setBody(ap.getPyObject(2, Py.None));
        setDecorator_list(ap.getPyObject(3, Py.None));
        int lin = ap.getInt(4, -1);
        if (lin != -1) {
            setLineno(lin);
        }

        int col = ap.getInt(5, -1);
        if (col != -1) {
            setLineno(col);
        }

    }

    public FunctionDef(PyObject name, PyObject args, PyObject body,
            PyObject decorator_list) {
        setName(name);
        setArgs(args);
        setBody(body);
        setDecorator_list(decorator_list);
    }

    public FunctionDef(Token token, String name, arguments args,
            java.util.List<stmt> body, java.util.List<expr> decorator_list) {
        super(token);
        this.name = name;
        this.args = args;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<expr>();
        }
        for (PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public FunctionDef(Token token, Name name, arguments args,
            java.util.List<stmt> body, java.util.List<expr> decorator_list) {
        super(token);
        this.name = name.getText();
        this.nameNode = name;
        this.args = args;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<expr>();
        }
        for (PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public FunctionDef(Integer ttype, Token token, String name, arguments args,
            java.util.List<stmt> body, java.util.List<expr> decorator_list) {
        super(ttype, token);
        this.name = name;
        this.args = args;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<expr>();
        }
        for (PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    public FunctionDef(PythonTree tree, String name, arguments args,
            java.util.List<stmt> body, java.util.List<expr> decorator_list) {
        super(tree);
        this.name = name;
        this.args = args;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
        this.decorator_list = decorator_list;
        if (decorator_list == null) {
            this.decorator_list = new ArrayList<expr>();
        }
        for (PythonTree t : this.decorator_list) {
            addChild(t);
        }
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "FunctionDef";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("FunctionDef(");
        sb.append("name=");
        sb.append(dumpThis(name));
        sb.append(",");
        sb.append("args=");
        sb.append(dumpThis(args));
        sb.append(",");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append("decorator_list=");
        sb.append(dumpThis(decorator_list));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitFunctionDef(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (args != null)
            args.accept(visitor);
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
        if (decorator_list != null) {
            for (PythonTree t : decorator_list) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;

    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;

    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

    // Truffle
    PyTuple defaultArguments;

    /*
     * Execution as a statement in its enclosing scope (make such a function)
     * 
     * @see org.python.antlr.base.stmt#executeVoid(com.oracle.truffle.api.frame.
     * VirtualFrame)
     */
    @Override
    public void executeVoid(VirtualFrame frame) {
        defaultArguments = (PyTuple) args.execute(frame);

        CallTarget function = Truffle.getRuntime().createCallTarget(this, frameDescriptor);
        frame.setObject(nameNode.getSlot(), function);
    }

    /*
     * Execution as a root node (interpret the function body)
     * 
     * @see
     * org.python.core.PyObject#execute(com.oracle.truffle.api.frame.VirtualFrame
     * )
     */
    @Override
    public Object execute(VirtualFrame frame) {
        applyArguments(frame, frame.getArguments());

        setupArguments(frame);

        for (int i = 0; i < body.size(); i++) {
            PythonTree s = body.get(i);

            try {
                if (s instanceof stmt) {
                    ((stmt) s).executeVoid(frame);
                } else {
                    throw new RuntimeException("unexpected statement type");
                }
            } catch (ExplicitReturnException ex) {
                return ex.getValue();
            } catch (ImplicitReturnException ix) {
                // fall to the end
            }
        }

        return null;
    }

    private void applyArguments(VirtualFrame frame, Arguments arguments) {
        assert !Options.specialize : "Should only be used for the old Interpreter";

        // match arguments with locals by position
        PArguments pargs = (PArguments) arguments;
        List<? extends FrameSlot> slots = frameDescriptor.getSlots();

        for (int i = 0; i < pargs.getArgumentsArray().length; i++) {
            frame.setObject(slots.get(i), pargs.getArgumentsArray()[i]);
        }
    }

    private void setupArguments(VirtualFrame frame) {
        /**
         * The indexing scheme of argument setup
         * 
         * index : [0, 1, 2, 3] Parameters : a, b, c, d
         * 
         * index : [0, 1] Default Arguments: _, _, 3, 4
         * 
         * Arguments : _____________________ 5, 6, 7, _
         * 
         */

        if (defaultArguments != null && defaultArguments.size() > 0) {
            List<expr> argumentList = args.getInternalArgs();
            int numOfParameters = args.getInternalArgs().size();
            int numOfDefaultArguments = defaultArguments.size();
            int offset = numOfParameters - numOfDefaultArguments;

            for (int i = 0; i < numOfDefaultArguments; i++) {
                int defaultArgumentsIndex = i;// i - offset;
                Object value = defaultArguments.__finditem__(defaultArgumentsIndex);
                Name name = (Name) argumentList.get(offset + i);
                FrameSlot slot = frameDescriptor.findFrameSlot(name.getInternalId());
                frame.setObject(slot, value);
            }
        }
    }
}
