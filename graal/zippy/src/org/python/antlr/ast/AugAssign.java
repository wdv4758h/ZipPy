// Autogenerated AST node
package org.python.antlr.ast;

import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.Options;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.core.truffle.VirtualFrameUtil;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;

import com.oracle.truffle.api.frame.VirtualFrame;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@ExposedType(name = "_ast.AugAssign", base = AST.class)
public class AugAssign extends stmt {
    public static final PyType TYPE = PyType.fromClass(AugAssign.class);
    private expr target;

    public expr getInternalTarget() {
        return target;
    }

    @ExposedGet(name = "target")
    public PyObject getTarget() {
        return target;
    }

    @ExposedSet(name = "target")
    public void setTarget(PyObject target) {
        // Truffle
        if (Options.specialize) {
            this.target = adoptChild(AstAdapters.py2expr(target));
        } else {
            this.target = AstAdapters.py2expr(target);
        }
    }

    private operatorType op;

    public operatorType getInternalOp() {
        return op;
    }

    @ExposedGet(name = "op")
    public PyObject getOp() {
        return AstAdapters.operator2py(op);
    }

    @ExposedSet(name = "op")
    public void setOp(PyObject op) {
        this.op = AstAdapters.py2operator(op);
    }

    private expr value;

    public expr getInternalValue() {
        return value;
    }

    @ExposedGet(name = "value")
    public PyObject getValue() {
        return value;
    }

    @ExposedSet(name = "value")
    public void setValue(PyObject value) {
        this.value = AstAdapters.py2expr(value);
    }

    private final static PyString[] fields = new PyString[] {
            new PyString("target"), new PyString("op"), new PyString("value") };

    @ExposedGet(name = "_fields")
    public PyString[] get_fields() {
        return fields;
    }

    private final static PyString[] attributes = new PyString[] {
            new PyString("lineno"), new PyString("col_offset") };

    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() {
        return attributes;
    }

    public AugAssign(PyType subType) {
        super(subType);
    }

    public AugAssign() {
        this(TYPE);
    }

    @ExposedNew
    @ExposedMethod
    public void AugAssign___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("AugAssign", args, keywords, new String[] {
                "target", "op", "value", "lineno", "col_offset" }, 3, true);
        setTarget(ap.getPyObject(0, Py.None));
        setOp(ap.getPyObject(1, Py.None));
        setValue(ap.getPyObject(2, Py.None));
        int lin = ap.getInt(3, -1);
        if (lin != -1) {
            setLineno(lin);
        }

        int col = ap.getInt(4, -1);
        if (col != -1) {
            setLineno(col);
        }

    }

    public AugAssign(PyObject target, PyObject op, PyObject value) {
        setTarget(target);
        setOp(op);
        setValue(value);
    }

    public AugAssign(Token token, expr target, operatorType op, expr value) {
        super(token);
        this.target = target;
        addChild(target);
        this.op = op;
        this.value = value;
        addChild(value);
    }

    public AugAssign(Integer ttype, Token token, expr target, operatorType op,
            expr value) {
        super(ttype, token);
        this.target = target;
        addChild(target);
        this.op = op;
        this.value = value;
        addChild(value);
    }

    public AugAssign(PythonTree tree, expr target, operatorType op, expr value) {
        super(tree);
        this.target = target;
        addChild(target);
        this.op = op;
        this.value = value;
        addChild(value);
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "AugAssign";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("AugAssign(");
        sb.append("target=");
        sb.append(dumpThis(target));
        sb.append(",");
        sb.append("op=");
        sb.append(dumpThis(op));
        sb.append(",");
        sb.append("value=");
        sb.append(dumpThis(value));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitAugAssign(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (target != null)
            target.accept(visitor);
        if (value != null)
            value.accept(visitor);
    }
    
    public void traverseValue(VisitorIF<?> visitor) throws Exception {
        if (value != null)
            value.accept(visitor);
    }
    
    

    private int lineno = -1;

    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;

    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

    @Override
    public void executeVoid(VirtualFrame frame) {
        PyObject originalValue = (PyObject) target.executeGeneric(frame);
        PyObject val = (PyObject) value.executeGeneric(frame);
    	PyObject result;
         	
    	switch(op) {
			case Add:
				result = originalValue._add(val);
				break;
			case Sub:
				result = originalValue._sub(val);
				break;
			case Mult:
				result = originalValue._mul(val);
				break;
			case Div:
				result = originalValue._div(val);
				break;    		
			case Mod:
				result = originalValue._mod(val);
				break;
			case Pow:
				result = originalValue._pow(val);
				break;
			case LShift:
				result = originalValue._lshift(val);
				break;
			case RShift:
				result = originalValue._rshift(val);
				break;
			case BitOr:
				result = originalValue._or(val);
				break;
			case BitXor:
				result = originalValue._xor(val);
				break;
			case BitAnd:
				result = originalValue._and(val);
				break;
			case FloorDiv:
				result = originalValue._floordiv(val);
				break;  			
			default:
		        throw Py.SystemError("Not implemented!");    			
			}

    	if (target instanceof Name) {
    	    VirtualFrameUtil.setName(frame, (Name) target, result);
    	} else if (target instanceof Subscript) {
    	    ((Subscript) target).doUpdate(frame, result);
    	}
    }

}